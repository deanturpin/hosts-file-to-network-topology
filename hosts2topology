#!/bin/bash

# Check if output type provided
[[ $# == 1 ]] && output_file=$1 || output_file=topology.svg

# Calculate output file type from extension
output_type=${output_file#*.}

# Read hosts
mapfile hosts

# Decimal to binary netmask converter
function decimal2binary {

	readonly local d2b=({0,1}{0,1}{0,1}{0,1}{0,1}{0,1}{0,1}{0,1})
	local binary=
	local ip=$1

	# Extract decimals
	while [[ $ip =~ [[:digit:]]{1,3} ]]; do

		# Convert decimal to binary and append to result
		binary+=${d2b[$BASH_REMATCH]}
		
		# Remove the match from search
		ip=${ip/$BASH_REMATCH//}
	done

	echo $binary
}

# Create associative arrays
declare -A nodes
declare -A netmasks
declare -A hostnames
declare -A connections

# Loop through each host
for (( i=0; i<${#hosts[*]}; ++i )); do

	# Does entry match an IP?
	if [[ ${hosts[i]} =~ ^[[:digit:]\.]{7,} ]]; then

		host=$BASH_REMATCH
		nodes[$host]=unknown

		# Extract hostnames
		[[ ${hosts[i]} =~ ^[[:digit:]\.]{7,}\ *([^#]*) ]] && hostnames[$host]=${BASH_REMATCH[1]}

		# Check if there's another IP in the comment
		[[ ${hosts[i]} =~ [#]\ ([[:digit:]\.]{7,}) ]] && connections[$host]=${BASH_REMATCH[1]}

	else
		# Does entry match a CIDR netmask?
		[[ ${hosts[i]} =~ ([[:digit:]\.]{7,})/([[:digit:]]{2}) ]] && netmasks[${BASH_REMATCH[1]}]=${BASH_REMATCH[2]}
	fi
done

# Compare each IP with the netmasks
for ip in ${!nodes[*]}; do

	# Convert IP to binary
	ip_binary=$(decimal2binary $ip)

	# Compare with the netmasks
	for netmask in ${!netmasks[*]}; do

		# Convert netmask to binary
		netmask_binary=$(decimal2binary $netmask)

		# Trim off host identifier
		bits=${netmasks[$netmask]}
		netmask_binary=${netmask_binary:0:$bits}

		# Compare with IP and stop looking if we find a match
		[[ $ip_binary =~ ^$netmask_binary ]] && nodes[$ip]=$netmask && break
	done
done

# Header
dot=("graph { node [style=filled]; node [fillcolor=red]; label=\"hosts2topology - $(date)\"; ")

# Dump netmasks
for netmask in ${!netmasks[*]}; do dot+=("\"$netmask\" [fillcolor=cyan]; "); done

# Dump node info
for node in ${!nodes[*]}; do dot+=("\"$node\" [fillcolor=white label=\"${hostnames[$node]}\n$node\"]; "); done

# Dump subnets
for node in ${!nodes[*]}; do dot+=("\"$node\"--\"${nodes[$node]}\"; "); done

# Dump connections betwixt subnets
for node in ${!connections[*]}; do dot+=("\"${connections[$node]}\"--\"$node\"; "); done

# Footer
dot+=("}")

# Generate topology
echo ${dot[*]} | circo -T$output_type > $output_file
